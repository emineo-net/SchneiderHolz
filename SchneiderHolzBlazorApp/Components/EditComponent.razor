@using Microsoft.AspNetCore.Mvc.ViewFeatures


<div class="@Class">
    <div class="ft-07 mb-03 field-label @LabelClass">@Label</div>
    @switch (TypeId)
    {

        @* use multiple casas ===================

            case "run":
            case "notrun":
            case "runfaster":
            DoRun();
            break;
            case "save":
            DoSave();
            break;  *@




        @* original ===============
            case InputType.constant:
            <div class="label-field-value @ValueClass">@Value</div>
            break;
            case InputType.text:
            <input class="form-control input @ValueClass"
            type="text"
            @bind="Value" />

            break;
            case InputType.date:
            <input class="form-control input @ValueClass"
            type="date"
            @bind="DateValue" />*@


        case 1:
            <input class="form-control input @ValueClass"
           type="text"
           @bind="Value" />
            break;
        case 2:
            <div class="label-field-value @ValueClass">@Value</div>
            break;
        case 3:
            <input class="form-control input @ValueClass"
           type="date"
           @bind="DateValue" />
            break;
        default:
            break;
    }
</div>

@code {

    [Parameter]
    public string ValueClass { get; set; }

    [Parameter]
    public int TypeId { get; set; }

    [Parameter]
    public EventCallback<string> OnTextChange { get; set; }

    [Parameter]
    public EventCallback<DateTime?> OnDateChange { get; set; }

    private string _tbText;
    private DateTime? _tbDate;

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string LabelClass { get; set; }

    [Parameter]
    public string Value
    {
        get => _tbText;
        set
        {
            if (_tbText == value) return;

            _tbText = value;
            OnTextChange.InvokeAsync(value);
        }
    }

    [Parameter]
    public DateTime? DateValue
    {
        get => _tbDate;
        set
        {
            if (_tbDate == value) return;

            _tbDate = value;
            OnDateChange.InvokeAsync(_tbDate);
        }
    }

}
