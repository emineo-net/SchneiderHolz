@typeparam T
@using System.Linq.Expressions
@using System.Globalization
@inherits InputBase<decimal>

@if (!string.IsNullOrWhiteSpace(Label))
{
	<LabelLocalizeable CssClass="@(LabelCssClass != null ? LabelCssClass : "col col-form-label")" TranslateKey="@Label"/>
}
<div class="@(InputContainerCssClass != null ? InputContainerCssClass : "col")">
	<input @bind="DecimalValue" @attributes="AdditionalAttributes" class="@(InputCssClass != null ? InputCssClass : "form-control form-control-sm")" id="@Label" type="text"/>
	@if(ValidationFor is not null) 
	{
		<ValidationMessage For="@ValidationFor"/>
	}
</div>

@code {

	[Parameter]
	public string Label { get; set; }

	[Parameter]
	public string Format { get; set; } = "N2";

	[Parameter]
	public string LabelCssClass { get; set; }

	[Parameter]
	public string InputCssClass { get; set; }

	[Parameter]
	public string InputContainerCssClass { get; set; }

	[Parameter]
	public Expression<Func<T>> ValidationFor { get; set; } = null;

	private string decimalValue { get; set; }
	private NumberStyles style = NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign;
	private CultureInfo culture = CultureInfo.CurrentCulture;
	private bool init = true;

	private string DecimalValue
	{
		get => decimalValue;
		set
		{
			if (decimal.TryParse(value.Replace(".", culture.NumberFormat.PercentDecimalSeparator).Replace(",", culture.NumberFormat.PercentDecimalSeparator), style, culture, out var temp))
			{
				CurrentValue = temp;
				if (init)
				{
					init = false;
					decimalValue = temp.ToString(Format);
				}
				else
				{
					decimalValue = temp.ToString(Format).TrimEnd('0').TrimEnd(',').TrimEnd('.');
				}
			}
		}
	}

	protected override void OnParametersSet()
	{
		init = true;
		DecimalValue = CurrentValue.ToString(Format);
	}

	protected override bool TryParseValueFromString(string value, out decimal result, out string validationErrorMessage)
	{
		result = CurrentValue;
		validationErrorMessage = "";
		return true;
	}

}