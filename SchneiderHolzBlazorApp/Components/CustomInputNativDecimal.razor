<input @bind="DecimalValue" class="form-control form-control-sm text-end" id="@ControlId" type="text"/>

@code
{
	[Parameter]
	public string ControlId { get; set; }

	[Parameter]
	public decimal CurrentValue { get; set; }

	[Parameter]
	public EventCallback<decimal> ValueChanged { get; set; }

	[Parameter]
	public string Format { get; set; } = "N2";

	private string decimalValue { get; set; }
	private readonly NumberStyles style = NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign;
	private readonly CultureInfo _culture = CultureInfo.CurrentCulture;
	private bool _init = true;

	private string DecimalValue
	{
		get => decimalValue;
		set
		{
			if (decimal.TryParse(value.Replace(".", _culture.NumberFormat.PercentDecimalSeparator).Replace(",", _culture.NumberFormat.PercentDecimalSeparator), style, _culture, out var temp))
			{
				CurrentValue = temp;
				if (_init)
				{
					_init = false;
					decimalValue = temp.ToString(Format);
				}
				else
				{
					decimalValue = temp.ToString(Format).TrimEnd('0').TrimEnd(',').TrimEnd('.');
					ValueChanged.InvokeAsync(temp).GetAwaiter().GetResult();
				}
			}
		}
	}

	protected override void OnParametersSet()
	{
		_init = true;
		DecimalValue = CurrentValue.ToString(Format);
	}
}